{"version":3,"sources":["Logo.js","components/BestPokemon.js","components/CaughtPokemon.js","App.js","serviceWorker.js","index.js"],"names":["Logo","props","appName","src","alt","width","height","BestPokemon","abilities","map","ability","i","key","CaughtPokemon","className","date","App","Date","toJSON","slice","split","reverse","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAceA,G,UAZF,SAACC,GAEV,OAAO,oCAEP,gCACI,4CAAiB,2BAAIA,EAAMC,UAC3B,yBAAKC,IAAI,kEAAkEC,IAAI,UAAUC,MAAM,QAAQC,OAAO,cCSvGC,EAfK,SAACN,GAEjB,OAAQ,oCACJ,8BACI,sDAA2B,6CAC3B,qDACA,4BAAKA,EAAMO,UAAUC,KAAI,SAACC,EAASC,GAC/B,OAAQ,wBAAIC,IAAKD,GAAID,UCFtBG,EALO,SAACZ,GAEnB,OAAQ,uBAAGa,UAAU,kBAAb,uBAAmDb,EAAMc,OCiBtDC,EAbH,WACV,IACMD,GAAO,IAAIE,MAAOC,SAASC,MAAM,EAAE,IAAIC,MAAM,KAAKC,UAAUC,KAAK,KACvE,OAAO,oCACL,kBAAC,EAAD,CAAMpB,QAAQ,YAEd,kBAAC,EAAD,CAAaM,UALG,CAAC,eAAgB,eAAgB,cAOjD,kBAAC,EAAD,CAAeO,KAAMA,MCJLQ,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfc94ee6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Logo = (props) => {\r\n    /* const appName = \"Pokedex\"; */\r\n    return <>\r\n    \r\n    <header>\r\n        <h1>Bienvidos al <u>{props.appName}</u></h1> \r\n        <img src=\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/016.png\" alt=\"Pokemon\" width=\"200px\" height=\"200px\"/>\r\n    </header>\r\n    \r\n    </>\r\n}\r\n\r\nexport default Logo;","import React from \"react\"\r\n\r\nconst BestPokemon = (props) => {\r\n    /* const abilities = ['Anticipation', 'Adaptability', 'Run-Away']; */\r\n    return (<>\r\n        <main>\r\n            <p>My favourite Pokemon is <strong>Squirtle</strong></p>\r\n            <p>My main abilities are:</p>\r\n            <ul>{props.abilities.map((ability, i)=>{\r\n                return (<li key={i}>{ability}</li>)\r\n            })}\r\n            </ul>\r\n        </main>\r\n    </>)\r\n}\r\n\r\n\r\nexport default BestPokemon","import React from 'react'\r\n\r\nconst CaughtPokemon = (props) => {\r\n    /* const date  = new Date().toLocaleDateString(); */\r\n    return (<p className=\"date-paragraph\">Caught 0 Pokemon on {props.date}</p>)\r\n}\r\n\r\nexport default CaughtPokemon\r\n","import React from \"react\"\n\nimport \"./App.css\"\n\nimport Logo from \"./Logo\"\nimport BestPokemon from \"./components/BestPokemon\"\nimport CaughtPokemon from \"./components/CaughtPokemon\"\n\nconst App = () => {\n  const abilities = ['Anticipation', 'Adaptability', 'Run-Away'];\n  const date = new Date().toJSON().slice(0,10).split('-').reverse().join('/');\n  return <> \n    <Logo appName=\"Pokedex\"/>\n\n    <BestPokemon abilities={abilities} />    \n\n    <CaughtPokemon date={date} />\n  </>\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}