{"version":3,"sources":["Logo.js","components/BestPokemon/BestPokemon.js","components/CaughtPokemon/CaughtPokemon.js","components/PokemonMoves/PokemonMoves.js","components/PokemonMovesSelector/PokemonMovesSelector.js","components/PokemonCity/PokemonCity.js","App.js","serviceWorker.js","index.js"],"names":["Logo","props","appName","src","alt","width","height","onClick","logWhenClicked","BestPokemon","className","abilities","map","ability","i","key","CaughtPokemon","useState","caught","setCaught","num","setNum","pokemonNameInput","setPokemonNameInput","date","type","value","onChange","event","target","randomNum","Math","round","random","PokemonMoves","pokemonData","setPokemonData","console","log","useEffect","fetch","pokemonId","then","result","json","data","name","moves","move","index","PokemonMovesSelector","id","setId","PokemonCity","city","setCity","App","Date","toJSON","slice","split","reverse","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ffd8295.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Logo = (props) => {\r\n    /* const appName = \"Pokedex\"; */\r\n\r\n    return <>   \r\n    <header>\r\n        <h1>Welcome to <u>{props.appName}</u></h1> \r\n        <img src=\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/016.png\" alt=\"Pokemon\" width=\"200px\" height=\"200px\" onClick={props.logWhenClicked}/>\r\n    </header>\r\n    \r\n    </>\r\n}\r\n\r\nexport default Logo;","import React from \"react\"\r\n\r\nimport \"./style.css\"\r\n\r\nconst BestPokemon = (props) => {\r\n    /* const abilities = ['Anticipation', 'Adaptability', 'Run-Away']; */\r\n    return (<>\r\n        <div className=\"abilities-div\">\r\n            <p>My favourite Pokemon is <strong>Pidgey</strong></p>\r\n            <p>His main <b>abilities</b> are:</p>\r\n            <ul>{props.abilities.map((ability, i)=>{\r\n                return (<li key={i}>{ability}</li>)\r\n            })}\r\n            </ul>\r\n        </div>\r\n    </>)\r\n}\r\n\r\n\r\nexport default BestPokemon","import React, { useState } from 'react';\r\n\r\nimport \"./style.css\";\r\n\r\nconst CaughtPokemon = (props) => {\r\n    const [caught, setCaught] = useState(0);   \r\n    const [num, setNum] = useState(\"001\");\r\n    const[pokemonNameInput,setPokemonNameInput]= useState(\"\");\r\n\r\n    const incrementCount = () => {\r\n    setCaught(caught + 1); \r\n    }\r\n\r\n    const generateRandomId = () => {\r\n        const randomNum = Math.round(Math.random() * 100);\r\n            if (randomNum < 10) {\r\n                setNum(`00${randomNum}`); \r\n            } else if(randomNum >= 10) {\r\n                setNum(`0${randomNum}`);\r\n            }\r\n    }\r\n    const handleInputChange = (event) =>{\r\n      setPokemonNameInput (event.target.value);  \r\n    } \r\n\r\n    return (<>\r\n        <div className=\"inline\">\r\n            <p className=\"paragraph\"><b>Caught</b> <span className=\"caughtSpan\">{caught}</span> Pokemon on {props.date}</p>\r\n            <button onClick={incrementCount} className=\"caughtPokemon\">Click me</button>\r\n        </div>\r\n\r\n        <div className=\"inline\">\r\n            <div>                \r\n                <p>Random number is {num}</p>\r\n                <input type=\"text\" \r\n                value={pokemonNameInput}\r\n                onChange={handleInputChange}/>\r\n                <button className=\"caughtPokemon\" onClick={generateRandomId} >Click me</button>            \r\n            </div>\r\n            <img alt=\"pokemon-image2\" src={`https://assets.pokemon.com/assets/cms2/img/pokedex/full/${num}.png`} height=\"200\" width=\"200\"/>\r\n        </div>\r\n    </> \r\n    )\r\n}\r\n\r\nexport default CaughtPokemon","import React, {useState, useEffect} from \"react\";\r\n\r\nimport './style.css';\r\n\r\nconst PokemonMoves = (props) =>{\r\nconst [pokemonData, setPokemonData] = useState(null);\r\n\r\nconsole.log('props', props);\r\n\r\nuseEffect(() => {   \r\n    fetch(\r\n        `https://pokeapi.co/api/v2/pokemon/${props.pokemonId}/`\r\n    )\r\n        .then((result) => result.json())\r\n        .then((data) => {\r\n        setPokemonData(data);\r\n        });\r\n    }, [props.pokemonId]);\r\n\r\nconst showingData = pokemonData ? \r\n        <div className=\"pokemon-moves\">\r\n            <h3>{pokemonData.name}'s moves:</h3>\r\n            <ul>\r\n                {pokemonData.moves.map((move, index) => {\r\n                return <li key={index}>{move.move.name}</li>;\r\n                })}\r\n            </ul>\r\n        </div> \r\n    :  null;\r\nreturn showingData;\r\n}    \r\n\r\n\r\nexport default PokemonMoves;\r\n","import React,{ useState} from \"react\";\r\nimport PokemonMoves from './../PokemonMoves/PokemonMoves';\r\n\r\nimport './style.css';\r\n\r\nfunction PokemonMovesSelector() {\r\n  const [id, setId] = useState(null);\r\n\r\n  function handleBulbasaurClick() {\r\n    setId(1);\r\n  }\r\n  function handleCharmanderClick() {\r\n    setId(4);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pokemon-moves-selector\">\r\n      <button onClick={handleBulbasaurClick}>Fetch Bulbasaur</button>\r\n      <button onClick={handleCharmanderClick}>Fetch Charmander</button>\r\n      {id ? <PokemonMoves pokemonId={id} /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default PokemonMovesSelector;","import React, { useState } from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst  PokemonCity = () =>{\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const updateCity = (event) => {\r\n    setCity(event.target.value);\r\n    console.log('event',event);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pokemon-city-div\">\r\n    <input type=\"text\" \r\n    value={city}\r\n    onChange={updateCity}\r\n    />\r\n      <p>Welcome to the city of {city}</p>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonCity;","import React from \"react\"\r\n\r\nimport Logo from \"./Logo\"\r\nimport BestPokemon from \"./components/BestPokemon/BestPokemon\"\r\nimport CaughtPokemon from './components/CaughtPokemon/CaughtPokemon';\r\nimport PokemonMovesSelector from './components/PokemonMovesSelector/PokemonMovesSelector';\r\nimport PokemonCity from './components/PokemonCity/PokemonCity';\r\n\r\n\r\nimport \"./App.css\"\r\n\r\n\r\n\r\nconst App = () => {\r\n  const logWhenClicked = () => {\r\n    console.log(\"Image was clicked!\");\r\n  }\r\n  const abilities = ['Anticipation', 'Adaptability', 'Run-Away'];\r\n  const date = new Date().toJSON().slice(0,10).split('-').reverse().join('/');\r\n  return <> \r\n    <Logo appName=\"Pokedex\" logWhenClicked = {logWhenClicked}/>\r\n\r\n    <BestPokemon abilities={abilities} />    \r\n\r\n    <CaughtPokemon date={date} />\r\n    <PokemonMovesSelector />\r\n    <PokemonCity />\r\n  </>\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}